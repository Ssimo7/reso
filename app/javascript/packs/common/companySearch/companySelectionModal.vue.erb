<template lang="pug">
  modal(:show.sync='showModal')
    div(slot='header') <%= I18n.t('common_vuejs.company_search.modal_header_title') %>
    template(v-if='isRequestInProgress')
      .ui.basic.segment.padded
        .ui.inverted.dimmer(:class='{ active: isRequestInProgress }')
          .ui.indeterminate.medium.text.loader
            div <%= I18n.t('common_vuejs.company_search.modal_loading') %>
    template(v-else-if='companies.length == 0')
      .ui.warning.message
        .header <%= I18n.t('common_vuejs.company_search.no_company_found_title') %>
        p <%= I18n.t('common_vuejs.company_search.no_company_found_text_html') %>
    template(v-else='')
      table.ui.table(:class='{ hidden: isRequestInProgress }')
        thead
          tr
            th <%= I18n.t('common_vuejs.company_search.company_name') %>
            th <%= I18n.t('common_vuejs.company_search.company_location') %>
        tbody
          tr(
            is="company-item",
            v-for="(company, index) in companies",
            v-bind:key="index",
            v-bind:company="company",
            v-on:close-modal="closeModal",
            v-on:search-siren="searchSiren"
          )
    div(slot='actions')
      button.ui.button(v-on:click='closeModal') <%= I18n.t('close') %>
</template>

<script>
import { mapState, mapMutations } from 'vuex'
import * as types from './store/searchMutationTypes'
import CompanyItem from './companyItem.vue.erb'
import Modal from '../modal.vue.erb'
import ErrorService from '../errorService'

export default {
  name: 'company-selection-modal',
  components: {
    CompanyItem,
    Modal
  },
  props: ['show'],
  methods: {
    searchSiren: function (siren) {
      this.clearError()
      this.closeModal()
      this.$store.dispatch('fetchCompanyBySiren', { siren }).catch(ErrorService.report)
    },
    closeModal: function () {
      this.showModal = false
    },
    clearError: function () {
      this.setErrorType('')
    },
    clearCompaniesSearchResults: function () {
      this.setCompanies([])
    },
    ...mapMutations({
      setErrorType: types.FORM_ERROR_TYPE,
      setCompanies: types.COMPANIES
    })
  },
  computed: {
    ...mapState({
      companies: state => state.searchStore.companies,
      isRequestInProgress: state => state.searchStore.isRequestInProgress
    }),
    showModal: {
      get () {
        return this.show
      },
      set (value) {
        this.$emit('update:show', value)
        if (!value) {
          this.clearCompaniesSearchResults()
        }
      }
    }
  }
}
</script>

<style lang="sass">
  .ui.basic.segment.padded
    margin: 2em 0
</style>
