<template lang="pug">
  .ui.segment.shadow-less.dimmable(:class='{ dimmed: isRequestInProgress }')
    .ui.simple.inverted.dimmer
      .ui.text.loader
    company-search-by-siret(v-on:search-siret='searchSiret',
                            v-on:error='manageError')
    .ui.aligned.basic.segment
      .ui.horizontal.divider <%= I18n.t('diagnoses.index.or') %>
      p <%= I18n.t('diagnoses.index.search_by_name_and_county') %>
    company-search-by-name(v-on:search-name='searchName',
                           v-on:error='manageError')
    error-message(:error-type='errorType')
    company-view(:company-data='companyData',
                 v-on:detail-button-click='siret => { goToDetailedCompanyInfo(siret) }')
    modal(:show.sync='modalIsShowing')
      div(slot='header') Entreprises correspondantes
      table.ui.table
        thead
          tr
            th Nom
            th Localit√©
        tbody
          tr(
            is="company-item",
            v-for="(company, index) in companies",
            v-bind:key="index",
            v-bind:company="company",
            v-on:close-modal="closeModal",
            v-on:search-siren="searchSiren"
          )
      div(slot='actions')
        button.ui.button(v-on:click='modalIsShowing = false') Fermer
</template>

<script>
import { mapState, mapGetters, mapMutations } from 'vuex'
import * as types from './store/indexMutationTypes'
import CompanySearchBySiret from './companySearchBySiret.vue.erb'
import CompanySearchByName from './companySearchByName.vue.erb'
import ErrorMessage from './errorMessage.vue.erb'
import CompanyView from './companyView.vue.erb'
import CompanyItem from './companyItem.vue.erb'
import Modal from '../common/modal.vue.erb'

export default {
    name: 'select-company',
    components: {
        CompanySearchBySiret,
        CompanySearchByName,
        ErrorMessage,
        CompanyView,
        CompanyItem,
        Modal
    },
    data: function () {
      return {
          modalIsShowing: false
      }
    },
    methods: {
        searchSiret: function(siret) {
            this.setSiret(siret)
            this.clearError()
            this.$store.dispatch('fetchCompanyBySiret').catch(() => {})
        },
        searchSiren: function(siren) {
            this.setSiren(siren)
            this.clearError()
            this.closeModal()
            this.$store.dispatch('fetchCompanyBySiren').catch(() => {})
        },
        searchName: function(name, county) {
            this.setName(name)
            this.setCounty(county)
            this.clearError()
            this.$store.dispatch('fetchCompaniesByName').catch(() => {})
            this.modalIsShowing = true
        },
        manageError: function(error) {
            this.setErrorType(error)
            this.clearSiret()
        },
        clearSiret: function() {
            this.setSiret('')
        },
        clearError: function() {
            this.setErrorType('')
        },
        closeModal: function() {
            this.modalIsShowing = false
        },
        ...mapMutations({
            setSiret: types.SIRET,
            setSiren: types.SIREN,
            setName: types.NAME,
            setCounty: types.COUNTY,
            setErrorType: types.FORM_ERROR_TYPE
        }),
        goToDetailedCompanyInfo: function (siret) {
            const url = `/companies/${siret}`
            window.open(url, '_blank')
        }
    },
    computed: {
        ...mapState({
            companies: state => state.indexStore.companies,
            errorType: state => state.indexStore.formErrorType,
            companyData: state => state.indexStore.companyData,
            isRequestInProgress: state => state.indexStore.isRequestInProgress,
        }),
    }
}
</script>
