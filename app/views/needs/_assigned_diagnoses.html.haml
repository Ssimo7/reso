- assigned_diagnoses = Diagnosis.of_relay_or_expert(relay_or_expert)
- if assigned_diagnoses.present?
  .ui.segments.shadow-less
    %h3.ui.segment.block.header
      = title
    - assigned_diagnoses.each do |diagnosis|
      .ui.segment
        .ui.equal.width.grid
          .row.stretched
            .column
              %h4.ui.header
                = link_to(diagnosis.visit.company_name, besoin_path(diagnosis, params.permit(:access_token)))
                .sub.header
                  %i.map.marker.alternate.icon
                  - facility = diagnosis.visit.facility
                  .content= facility.readable_locality || facility.commune
                .sub.header
                  %i.calendar.icon
                  .content= I18n.l(diagnosis.visit.display_date, format: '%-d %B %Y')
            .column
              - diagnosis.diagnosed_needs.of_relay_or_expert(relay_or_expert).each do |need|
                .ui.text.small
                  = need.question_label
                - match = need.matches.of_relay_or_expert(relay_or_expert).first
                .ui.text.small.bold
                  - if match.status_quo?
                    %i.icon.clock
                  - elsif match.status_taking_care?
                    %i.icon.checkmark
                  - elsif match.status_done?
                    %i.icon.checkmark
                  - elsif match.status_not_for_me?
                    %i.icon.remove
                  = t("activerecord.attributes.match.statuses.#{match.status}")
